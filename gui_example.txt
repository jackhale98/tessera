import React, { useState } from 'react';
import { 
  Home, FolderKanban, FileText, AlertTriangle, Box, CheckSquare, Factory,
  Plus, Search, Filter, GitBranch, Bell, Star, Settings, LayoutGrid, Table,
  Network, Grid3x3, TrendingUp, Calendar, Users, Link, MessageSquare,
  ChevronRight, ChevronDown, Circle, CheckCircle, AlertCircle, Clock,
  BarChart3, PieChart, Activity, Download, Upload
} from 'lucide-react';

function App() {
  const [activeModule, setActiveModule] = useState('dashboard');
  const [activeView, setActiveView] = useState('table');
  const [selectedEntity, setSelectedEntity] = useState(null);

  const modules = [
    { id: 'dashboard', name: 'Dashboard', icon: Home },
    { id: 'project', name: 'Project Management', icon: FolderKanban },
    { id: 'requirements', name: 'Requirements', icon: FileText },
    { id: 'risks', name: 'Risk Management', icon: AlertTriangle },
    { id: 'design', name: 'Design & BOM', icon: Box },
    { id: 'verification', name: 'V&V', icon: CheckSquare },
    { id: 'manufacturing', name: 'Manufacturing', icon: Factory },
  ];

  const viewModes = [
    { id: 'table', name: 'Table', icon: Table },
    { id: 'graph', name: 'Graph', icon: Network },
    { id: 'matrix', name: 'Matrix', icon: Grid3x3 },
    { id: 'chart', name: 'Chart', icon: BarChart3 },
  ];

  return (
    <div className="flex h-screen bg-slate-50">
      {/* Sidebar */}
      <div className="w-64 bg-slate-900 text-white flex flex-col">
        <div className="p-4 border-b border-slate-700">
          <h1 className="text-xl font-bold">EDT</h1>
          <p className="text-xs text-slate-400">Product Lifecycle Management</p>
        </div>
        
        <nav className="flex-1 py-4 overflow-y-auto">
          {modules.map(module => (
            <button
              key={module.id}
              onClick={() => setActiveModule(module.id)}
              className={`w-full flex items-center gap-3 px-4 py-2.5 text-sm transition-colors ${
                activeModule === module.id 
                  ? 'bg-blue-600 text-white' 
                  : 'text-slate-300 hover:bg-slate-800'
              }`}
            >
              <module.icon size={18} />
              <span>{module.name}</span>
            </button>
          ))}
        </nav>

        <div className="p-4 border-t border-slate-700 space-y-2">
          <button className="w-full flex items-center gap-2 px-3 py-2 text-sm text-slate-300 hover:bg-slate-800 rounded">
            <GitBranch size={16} />
            <span>main</span>
          </button>
          <button className="w-full flex items-center gap-2 px-3 py-2 text-sm text-slate-300 hover:bg-slate-800 rounded">
            <Settings size={16} />
            <span>Settings</span>
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Top Bar */}
        <header className="bg-white border-b border-slate-200 px-6 py-3 flex items-center justify-between">
          <div className="flex items-center gap-4">
            <h2 className="text-lg font-semibold text-slate-800">
              {modules.find(m => m.id === activeModule)?.name}
            </h2>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-slate-400" size={16} />
              <input
                type="text"
                placeholder="Search entities..."
                className="pl-9 pr-4 py-1.5 border border-slate-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 w-64"
              />
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <button className="p-2 hover:bg-slate-100 rounded-lg relative">
              <Bell size={18} className="text-slate-600" />
              <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
            </button>
            <button className="p-2 hover:bg-slate-100 rounded-lg">
              <Star size={18} className="text-slate-600" />
            </button>
            <button className="px-4 py-1.5 bg-blue-600 text-white rounded-lg text-sm font-medium hover:bg-blue-700 flex items-center gap-2">
              <Plus size={16} />
              New Entity
            </button>
          </div>
        </header>

        {/* Content Area */}
        <div className="flex-1 overflow-auto">
          {activeModule === 'dashboard' && <DashboardView />}
          {activeModule === 'project' && <ModuleView module="project" viewMode={activeView} setViewMode={setActiveView} viewModes={viewModes} />}
          {activeModule === 'requirements' && <ModuleView module="requirements" viewMode={activeView} setViewMode={setActiveView} viewModes={viewModes} />}
          {activeModule === 'risks' && <RiskModuleView viewMode={activeView} setViewMode={setActiveView} viewModes={viewModes} />}
          {activeModule === 'design' && <DesignModuleView viewMode={activeView} setViewMode={setActiveView} viewModes={viewModes} />}
          {activeModule === 'verification' && <ModuleView module="verification" viewMode={activeView} setViewMode={setActiveView} viewModes={viewModes} />}
          {activeModule === 'manufacturing' && <ModuleView module="manufacturing" viewMode={activeView} setViewMode={setActiveView} viewModes={viewModes} />}
        </div>
      </div>
    </div>
  );
}

function DashboardView() {
  return (
    <div className="p-6 space-y-6">
      {/* Project Health Cards */}
      <div className="grid grid-cols-4 gap-4">
        <MetricCard
          title="Project Complete"
          value="67%"
          icon={TrendingUp}
          trend="+5% this week"
          color="blue"
        />
        <MetricCard
          title="Est. Completion"
          value="Dec 15, 2025"
          icon={Calendar}
          trend="On schedule"
          color="green"
        />
        <MetricCard
          title="Open Risks"
          value="12"
          icon={AlertTriangle}
          trend="3 unmitigated"
          color="red"
        />
        <MetricCard
          title="Requirements"
          value="156"
          icon={FileText}
          trend="94% verified"
          color="purple"
        />
      </div>

      {/* Warnings & Notifications */}
      <div className="grid grid-cols-2 gap-6">
        <div className="bg-white rounded-lg border border-slate-200 p-5">
          <h3 className="font-semibold text-slate-800 mb-4 flex items-center gap-2">
            <AlertCircle size={18} className="text-amber-500" />
            Warnings & Issues
          </h3>
          <div className="space-y-3">
            <WarningItem
              severity="high"
              text="Risk-047 has no mitigation controls"
              module="Risk Management"
            />
            <WarningItem
              severity="medium"
              text="Task-023 is 4 days behind schedule (critical path)"
              module="Project Management"
            />
            <WarningItem
              severity="medium"
              text="15 requirements without verification"
              module="Requirements"
            />
            <WarningItem
              severity="low"
              text="Tolerance analysis failed for Assembly-12"
              module="Design"
            />
          </div>
        </div>

        <div className="bg-white rounded-lg border border-slate-200 p-5">
          <h3 className="font-semibold text-slate-800 mb-4 flex items-center gap-2">
            <MessageSquare size={18} className="text-blue-500" />
            Recent Activity
          </h3>
          <div className="space-y-3">
            <ActivityItem
              user="Sarah Chen"
              action="commented on"
              entity="REQ-042"
              time="5 min ago"
            />
            <ActivityItem
              user="Mike Johnson"
              action="updated"
              entity="Task-089"
              time="23 min ago"
            />
            <ActivityItem
              user="Emily Davis"
              action="linked"
              entity="Risk-033 â†’ Component-15"
              time="1 hour ago"
            />
            <ActivityItem
              user="You"
              action="approved"
              entity="Design-Review-Q3"
              time="2 hours ago"
            />
          </div>
        </div>
      </div>

      {/* Charts Row */}
      <div className="grid grid-cols-3 gap-6">
        <div className="bg-white rounded-lg border border-slate-200 p-5">
          <h3 className="font-semibold text-slate-800 mb-4">Requirements Coverage</h3>
          <div className="space-y-2">
            <CoverageBar label="User Requirements" value={100} color="green" />
            <CoverageBar label="System Requirements" value={95} color="green" />
            <CoverageBar label="Design Requirements" value={88} color="yellow" />
            <CoverageBar label="Software Requirements" value={72} color="red" />
          </div>
        </div>

        <div className="bg-white rounded-lg border border-slate-200 p-5">
          <h3 className="font-semibold text-slate-800 mb-4">Risk Distribution</h3>
          <div className="h-48 flex items-center justify-center">
            <div className="relative w-36 h-36">
              <svg viewBox="0 0 100 100" className="transform -rotate-90">
                <circle cx="50" cy="50" r="40" fill="none" stroke="#e2e8f0" strokeWidth="12" />
                <circle cx="50" cy="50" r="40" fill="none" stroke="#ef4444" strokeWidth="12" 
                  strokeDasharray="50 251" />
                <circle cx="50" cy="50" r="40" fill="none" stroke="#f59e0b" strokeWidth="12" 
                  strokeDasharray="75 251" strokeDashoffset="-50" />
                <circle cx="50" cy="50" r="40" fill="none" stroke="#10b981" strokeWidth="12" 
                  strokeDasharray="126 251" strokeDashoffset="-125" />
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <span className="text-2xl font-bold text-slate-800">42</span>
              </div>
            </div>
          </div>
          <div className="flex justify-center gap-4 mt-4">
            <div className="flex items-center gap-1.5">
              <div className="w-3 h-3 bg-red-500 rounded-full"></div>
              <span className="text-xs text-slate-600">High: 8</span>
            </div>
            <div className="flex items-center gap-1.5">
              <div className="w-3 h-3 bg-amber-500 rounded-full"></div>
              <span className="text-xs text-slate-600">Med: 12</span>
            </div>
            <div className="flex items-center gap-1.5">
              <div className="w-3 h-3 bg-green-500 rounded-full"></div>
              <span className="text-xs text-slate-600">Low: 22</span>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg border border-slate-200 p-5">
          <h3 className="font-semibold text-slate-800 mb-4">Favorites</h3>
          <div className="space-y-2">
            <FavoriteItem icon={FileText} name="Critical Safety Req" id="REQ-001" />
            <FavoriteItem icon={AlertTriangle} name="High Voltage Risk" id="RISK-012" />
            <FavoriteItem icon={Box} name="Main Assembly" id="ASM-001" />
            <FavoriteItem icon={FolderKanban} name="Q4 Milestone" id="MILE-004" />
          </div>
        </div>
      </div>
    </div>
  );
}

function ModuleView({ module, viewMode, setViewMode, viewModes }) {
  return (
    <div className="h-full flex flex-col">
      {/* View Mode Selector */}
      <div className="bg-white border-b border-slate-200 px-6 py-3 flex items-center justify-between">
        <div className="flex items-center gap-2">
          {viewModes.map(mode => (
            <button
              key={mode.id}
              onClick={() => setViewMode(mode.id)}
              className={`px-3 py-1.5 rounded-lg text-sm font-medium flex items-center gap-2 ${
                viewMode === mode.id
                  ? 'bg-blue-100 text-blue-700'
                  : 'text-slate-600 hover:bg-slate-100'
              }`}
            >
              <mode.icon size={16} />
              {mode.name}
            </button>
          ))}
        </div>
        
        <div className="flex items-center gap-2">
          <button className="px-3 py-1.5 border border-slate-300 rounded-lg text-sm font-medium text-slate-700 hover:bg-slate-50 flex items-center gap-2">
            <Filter size={16} />
            Filter
          </button>
          <button className="px-3 py-1.5 border border-slate-300 rounded-lg text-sm font-medium text-slate-700 hover:bg-slate-50 flex items-center gap-2">
            <Download size={16} />
            Export
          </button>
        </div>
      </div>

      {/* Content based on view mode */}
      <div className="flex-1 overflow-auto p-6">
        {viewMode === 'table' && <TableView module={module} />}
        {viewMode === 'graph' && <GraphView module={module} />}
        {viewMode === 'matrix' && <MatrixView module={module} />}
        {viewMode === 'chart' && <ChartView module={module} />}
      </div>
    </div>
  );
}

function TableView({ module }) {
  const sampleData = module === 'project' ? [
    { id: 'TASK-001', name: 'PCB Design', status: 'In Progress', assigned: 'Sarah Chen', progress: 75, deadline: '2025-11-15' },
    { id: 'TASK-002', name: 'Firmware Development', status: 'In Progress', assigned: 'Mike Johnson', progress: 45, deadline: '2025-11-20' },
    { id: 'TASK-003', name: 'Safety Testing', status: 'Pending', assigned: 'Emily Davis', progress: 0, deadline: '2025-12-01' },
    { id: 'TASK-004', name: 'Documentation', status: 'Draft', assigned: 'Alex Wong', progress: 20, deadline: '2025-12-10' },
  ] : module === 'requirements' ? [
    { id: 'REQ-001', name: 'Device shall operate at 5V DC', type: 'System', status: 'Approved', verified: true },
    { id: 'REQ-002', name: 'User can control via mobile app', type: 'User', status: 'Approved', verified: true },
    { id: 'REQ-003', name: 'Battery life minimum 24 hours', type: 'System', status: 'Draft', verified: false },
    { id: 'REQ-004', name: 'Temperature range -10Â°C to 50Â°C', type: 'Design', status: 'Approved', verified: true },
  ] : [
    { id: 'ITEM-001', name: 'Sample Item 1', status: 'Active', category: 'Type A' },
    { id: 'ITEM-002', name: 'Sample Item 2', status: 'Pending', category: 'Type B' },
  ];

  return (
    <div className="bg-white rounded-lg border border-slate-200">
      <table className="w-full">
        <thead className="bg-slate-50 border-b border-slate-200">
          <tr>
            <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">ID</th>
            <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">Name</th>
            <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">
              {module === 'requirements' ? 'Type' : 'Status'}
            </th>
            {module === 'project' && (
              <>
                <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">Assigned</th>
                <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">Progress</th>
                <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">Deadline</th>
              </>
            )}
            {module === 'requirements' && (
              <>
                <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">Status</th>
                <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">Verified</th>
              </>
            )}
            <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">Actions</th>
          </tr>
        </thead>
        <tbody className="divide-y divide-slate-200">
          {sampleData.map((row, idx) => (
            <tr key={idx} className="hover:bg-slate-50 cursor-pointer">
              <td className="px-4 py-3 text-sm font-medium text-blue-600">{row.id}</td>
              <td className="px-4 py-3 text-sm text-slate-800">{row.name}</td>
              <td className="px-4 py-3">
                <StatusBadge status={module === 'requirements' ? row.type : row.status} />
              </td>
              {module === 'project' && (
                <>
                  <td className="px-4 py-3 text-sm text-slate-600">{row.assigned}</td>
                  <td className="px-4 py-3">
                    <ProgressBar value={row.progress} />
                  </td>
                  <td className="px-4 py-3 text-sm text-slate-600">{row.deadline}</td>
                </>
              )}
              {module === 'requirements' && (
                <>
                  <td className="px-4 py-3">
                    <StatusBadge status={row.status} />
                  </td>
                  <td className="px-4 py-3">
                    {row.verified ? (
                      <CheckCircle size={16} className="text-green-500" />
                    ) : (
                      <Circle size={16} className="text-slate-300" />
                    )}
                  </td>
                </>
              )}
              <td className="px-4 py-3">
                <button className="text-blue-600 hover:text-blue-800 text-sm font-medium">
                  View
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

function GraphView({ module }) {
  return (
    <div className="bg-white rounded-lg border border-slate-200 p-6 h-full">
      <div className="flex items-center justify-center h-full">
        <div className="text-center space-y-4">
          <Network size={64} className="text-slate-400 mx-auto" />
          <div>
            <h3 className="text-lg font-semibold text-slate-800">Entity Relationship Graph</h3>
            <p className="text-sm text-slate-600 mt-2">
              Visualize connections between {module} entities
            </p>
          </div>
          <div className="flex gap-4 justify-center mt-6">
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 rounded-full bg-blue-500"></div>
              <span className="text-sm text-slate-600">Primary</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 rounded-full bg-green-500"></div>
              <span className="text-sm text-slate-600">Linked</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 rounded-full bg-amber-500"></div>
              <span className="text-sm text-slate-600">Related</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function MatrixView({ module }) {
  return (
    <div className="bg-white rounded-lg border border-slate-200 p-6">
      <h3 className="text-lg font-semibold text-slate-800 mb-4">Traceability Matrix</h3>
      <div className="overflow-x-auto">
        <table className="w-full border-collapse">
          <thead>
            <tr className="border-b-2 border-slate-300">
              <th className="p-2 text-left text-xs font-semibold text-slate-600 bg-slate-50 sticky left-0">ID</th>
              <th className="p-2 text-center text-xs font-semibold text-slate-600 bg-slate-50">REQ-001</th>
              <th className="p-2 text-center text-xs font-semibold text-slate-600 bg-slate-50">REQ-002</th>
              <th className="p-2 text-center text-xs font-semibold text-slate-600 bg-slate-50">REQ-003</th>
              <th className="p-2 text-center text-xs font-semibold text-slate-600 bg-slate-50">REQ-004</th>
              <th className="p-2 text-center text-xs font-semibold text-slate-600 bg-slate-50">REQ-005</th>
            </tr>
          </thead>
          <tbody>
            {['COMP-001', 'COMP-002', 'COMP-003', 'COMP-004'].map((id, i) => (
              <tr key={i} className="border-b border-slate-200">
                <td className="p-2 text-sm font-medium text-blue-600 bg-slate-50 sticky left-0">{id}</td>
                <td className="p-2 text-center">
                  {Math.random() > 0.5 && <CheckCircle size={16} className="text-green-500 mx-auto" />}
                </td>
                <td className="p-2 text-center">
                  {Math.random() > 0.5 && <CheckCircle size={16} className="text-green-500 mx-auto" />}
                </td>
                <td className="p-2 text-center">
                  {Math.random() > 0.5 && <CheckCircle size={16} className="text-green-500 mx-auto" />}
                </td>
                <td className="p-2 text-center">
                  {Math.random() > 0.5 && <CheckCircle size={16} className="text-green-500 mx-auto" />}
                </td>
                <td className="p-2 text-center">
                  {Math.random() > 0.5 && <CheckCircle size={16} className="text-green-500 mx-auto" />}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

function ChartView({ module }) {
  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg border border-slate-200 p-6">
        <h3 className="text-lg font-semibold text-slate-800 mb-4">Gantt Chart</h3>
        <div className="space-y-2">
          <GanttBar name="PCB Design" start={10} duration={30} color="blue" />
          <GanttBar name="Firmware Dev" start={25} duration={40} color="green" />
          <GanttBar name="Testing" start={55} duration={25} color="amber" />
          <GanttBar name="Documentation" start={70} duration={20} color="purple" />
        </div>
        <div className="flex justify-between mt-4 text-xs text-slate-600">
          <span>Oct</span>
          <span>Nov</span>
          <span>Dec</span>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-6">
        <div className="bg-white rounded-lg border border-slate-200 p-6">
          <h3 className="text-lg font-semibold text-slate-800 mb-4">Task Status</h3>
          <div className="space-y-3">
            <StatusBar label="Complete" value={45} color="green" />
            <StatusBar label="In Progress" value={30} color="blue" />
            <StatusBar label="Pending" value={15} color="amber" />
            <StatusBar label="Blocked" value={10} color="red" />
          </div>
        </div>

        <div className="bg-white rounded-lg border border-slate-200 p-6">
          <h3 className="text-lg font-semibold text-slate-800 mb-4">Resource Utilization</h3>
          <div className="space-y-3">
            <ResourceBar name="Sarah Chen" value={85} />
            <ResourceBar name="Mike Johnson" value={95} />
            <ResourceBar name="Emily Davis" value={70} />
            <ResourceBar name="Alex Wong" value={60} />
          </div>
        </div>
      </div>
    </div>
  );
}

function RiskModuleView({ viewMode, setViewMode, viewModes }) {
  return (
    <div className="h-full flex flex-col">
      <div className="bg-white border-b border-slate-200 px-6 py-3 flex items-center justify-between">
        <div className="flex items-center gap-2">
          {viewModes.map(mode => (
            <button
              key={mode.id}
              onClick={() => setViewMode(mode.id)}
              className={`px-3 py-1.5 rounded-lg text-sm font-medium flex items-center gap-2 ${
                viewMode === mode.id
                  ? 'bg-blue-100 text-blue-700'
                  : 'text-slate-600 hover:bg-slate-100'
              }`}
            >
              <mode.icon size={16} />
              {mode.name}
            </button>
          ))}
        </div>
        
        <button className="px-3 py-1.5 border border-slate-300 rounded-lg text-sm font-medium text-slate-700 hover:bg-slate-50 flex items-center gap-2">
          <Download size={16} />
          Export FMEA
        </button>
      </div>

      <div className="flex-1 overflow-auto p-6">
        {viewMode === 'table' && (
          <div className="bg-white rounded-lg border border-slate-200">
            <table className="w-full">
              <thead className="bg-slate-50 border-b border-slate-200">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">ID</th>
                  <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">Risk</th>
                  <th className="px-4 py-3 text-center text-xs font-semibold text-slate-600 uppercase">Probability</th>
                  <th className="px-4 py-3 text-center text-xs font-semibold text-slate-600 uppercase">Severity</th>
                  <th className="px-4 py-3 text-center text-xs font-semibold text-slate-600 uppercase">Score</th>
                  <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">Controls</th>
                  <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">Status</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-slate-200">
                {[
                  { id: 'RISK-001', name: 'High voltage hazard', prob: 3, sev: 5, score: 15, controls: 2, status: 'Mitigated' },
                  { id: 'RISK-002', name: 'Battery overheating', prob: 2, sev: 4, score: 8, controls: 1, status: 'Open' },
                  { id: 'RISK-003', name: 'Water ingress', prob: 4, sev: 3, score: 12, controls: 3, status: 'Mitigated' },
                ].map((risk, idx) => (
                  <tr key={idx} className="hover:bg-slate-50 cursor-pointer">
                    <td className="px-4 py-3 text-sm font-medium text-blue-600">{risk.id}</td>
                    <td className="px-4 py-3 text-sm text-slate-800">{risk.name}</td>
                    <td className="px-4 py-3 text-center">
                      <span className="inline-flex items-center justify-center w-8 h-8 rounded-full bg-amber-100 text-amber-800 text-sm font-medium">
                        {risk.prob}
                      </span>
                    </td>
                    <td className="px-4 py-3 text-center">
                      <span className="inline-flex items-center justify-center w-8 h-8 rounded-full bg-red-100 text-red-800 text-sm font-medium">
                        {risk.sev}
                      </span>
                    </td>
                    <td className="px-4 py-3 text-center">
                      <RiskScoreBadge score={risk.score} />
                    </td>
                    <td className="px-4 py-3 text-sm text-slate-600">{risk.controls} controls</td>
                    <td className="px-4 py-3">
                      <StatusBadge status={risk.status} />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {viewMode === 'matrix' && (
          <div className="bg-white rounded-lg border border-slate-200 p-6">
            <h3 className="text-lg font-semibold text-slate-800 mb-4">Risk Matrix (Probability Ã— Severity)</h3>
            <div className="grid grid-cols-6 gap-1">
              <div className="p-2"></div>
              {[1, 2, 3, 4, 5].map(s => (
                <div key={s} className="p-2 text-center text-xs font-semibold text-slate-600">S{s}</div>
              ))}
              {[5, 4, 3, 2, 1].map(p => (
                <React.Fragment key={p}>
                  <div className="p-2 text-center text-xs font-semibold text-slate-600">P{p}</div>
                  {[1, 2, 3, 4, 5].map(s => {
                    const score = p * s;
                    const color = score <= 4 ? 'bg-green-300' : score <= 9 ? 'bg-yellow-300' : score <= 15 ? 'bg-orange-300' : 'bg-red-400';
                    return (
                      <div key={s} className={`${color} p-4 flex items-center justify-center text-sm font-semibold text-slate-800 rounded cursor-pointer hover:opacity-80`}>
                        {score}
                      </div>
                    );
                  })}
                </React.Fragment>
              ))}
            </div>
            <div className="flex justify-center gap-6 mt-6">
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-green-300 rounded"></div>
                <span className="text-sm text-slate-600">Low (1-4)</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-yellow-300 rounded"></div>
                <span className="text-sm text-slate-600">Medium (5-9)</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-orange-300 rounded"></div>
                <span className="text-sm text-slate-600">High (10-15)</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-red-400 rounded"></div>
                <span className="text-sm text-slate-600">Critical (16-25)</span>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

function DesignModuleView({ viewMode, setViewMode, viewModes }) {
  return (
    <div className="h-full flex flex-col">
      <div className="bg-white border-b border-slate-200 px-6 py-3 flex items-center justify-between">
        <div className="flex items-center gap-2">
          {viewModes.map(mode => (
            <button
              key={mode.id}
              onClick={() => setViewMode(mode.id)}
              className={`px-3 py-1.5 rounded-lg text-sm font-medium flex items-center gap-2 ${
                viewMode === mode.id
                  ? 'bg-blue-100 text-blue-700'
                  : 'text-slate-600 hover:bg-slate-100'
              }`}
            >
              <mode.icon size={16} />
              {mode.name}
            </button>
          ))}
        </div>
        
        <button className="px-3 py-1.5 border border-slate-300 rounded-lg text-sm font-medium text-slate-700 hover:bg-slate-50 flex items-center gap-2">
          <Download size={16} />
          Export BOM
        </button>
      </div>

      <div className="flex-1 overflow-auto p-6">
        {viewMode === 'table' && (
          <div className="bg-white rounded-lg border border-slate-200">
            <div className="border-b border-slate-200 p-4 bg-slate-50">
              <h3 className="font-semibold text-slate-800">Bill of Materials</h3>
            </div>
            <table className="w-full">
              <thead className="bg-slate-50 border-b border-slate-200">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">Part No.</th>
                  <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">Description</th>
                  <th className="px-4 py-3 text-center text-xs font-semibold text-slate-600 uppercase">Qty</th>
                  <th className="px-4 py-3 text-right text-xs font-semibold text-slate-600 uppercase">Unit Cost</th>
                  <th className="px-4 py-3 text-right text-xs font-semibold text-slate-600 uppercase">Total</th>
                  <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase">Supplier</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-slate-200">
                {[
                  { part: 'PCB-001', desc: 'Main Circuit Board', qty: 1, cost: 45.50, supplier: 'PCB Way' },
                  { part: 'RES-100K', desc: '100kÎ© Resistor 0805', qty: 12, cost: 0.05, supplier: 'Digikey' },
                  { part: 'CAP-10UF', desc: '10ÂµF Ceramic Capacitor', qty: 8, cost: 0.12, supplier: 'Digikey' },
                  { part: 'IC-MCU-001', desc: 'Microcontroller STM32F4', qty: 1, cost: 8.75, supplier: 'Mouser' },
                  { part: 'CONN-USB-C', desc: 'USB-C Connector', qty: 1, cost: 1.20, supplier: 'Mouser' },
                ].map((item, idx) => (
                  <tr key={idx} className="hover:bg-slate-50">
                    <td className="px-4 py-3 text-sm font-medium text-blue-600">{item.part}</td>
                    <td className="px-4 py-3 text-sm text-slate-800">{item.desc}</td>
                    <td className="px-4 py-3 text-center text-sm text-slate-600">{item.qty}</td>
                    <td className="px-4 py-3 text-right text-sm text-slate-600">${item.cost.toFixed(2)}</td>
                    <td className="px-4 py-3 text-right text-sm font-medium text-slate-800">
                      ${(item.qty * item.cost).toFixed(2)}
                    </td>
                    <td className="px-4 py-3 text-sm text-slate-600">{item.supplier}</td>
                  </tr>
                ))}
              </tbody>
              <tfoot className="bg-slate-50 border-t-2 border-slate-300">
                <tr>
                  <td colSpan="4" className="px-4 py-3 text-sm font-semibold text-slate-800 text-right">
                    Total BOM Cost:
                  </td>
                  <td className="px-4 py-3 text-right text-sm font-bold text-slate-900">
                    $57.21
                  </td>
                  <td></td>
                </tr>
              </tfoot>
            </table>
          </div>
        )}

        {viewMode === 'chart' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg border border-slate-200 p-6">
              <h3 className="text-lg font-semibold text-slate-800 mb-4">Tolerance Analysis Results</h3>
              <div className="grid grid-cols-3 gap-4 mb-6">
                <div className="p-4 bg-blue-50 rounded-lg">
                  <div className="text-sm text-slate-600">Worst Case</div>
                  <div className="text-2xl font-bold text-blue-700">Â±0.35mm</div>
                  <div className="text-xs text-slate-500 mt-1">Within spec</div>
                </div>
                <div className="p-4 bg-green-50 rounded-lg">
                  <div className="text-sm text-slate-600">RSS</div>
                  <div className="text-2xl font-bold text-green-700">Â±0.22mm</div>
                  <div className="text-xs text-slate-500 mt-1">Cpk: 1.8</div>
                </div>
                <div className="p-4 bg-purple-50 rounded-lg">
                  <div className="text-sm text-slate-600">Monte Carlo</div>
                  <div className="text-2xl font-bold text-purple-700">Â±0.25mm</div>
                  <div className="text-xs text-slate-500 mt-1">5000 iterations</div>
                </div>
              </div>
              <div className="h-48 flex items-end justify-around gap-2 border-l-2 border-b-2 border-slate-300 p-4">
                {[15, 28, 45, 72, 85, 95, 88, 65, 42, 25, 12, 8].map((height, i) => (
                  <div key={i} className="flex-1 bg-gradient-to-t from-blue-600 to-blue-400 rounded-t" 
                    style={{ height: `${height}%` }}></div>
                ))}
              </div>
              <div className="text-center text-xs text-slate-600 mt-2">Distribution Histogram</div>
            </div>

            <div className="bg-white rounded-lg border border-slate-200 p-6">
              <h3 className="text-lg font-semibold text-slate-800 mb-4">Cost Analysis by Volume</h3>
              <div className="grid grid-cols-4 gap-4">
                <div className="p-4 border border-slate-200 rounded-lg">
                  <div className="text-sm text-slate-600">Prototype (1-10)</div>
                  <div className="text-xl font-bold text-slate-800">$127.50</div>
                </div>
                <div className="p-4 border border-slate-200 rounded-lg">
                  <div className="text-sm text-slate-600">Low Volume (100)</div>
                  <div className="text-xl font-bold text-slate-800">$68.30</div>
                </div>
                <div className="p-4 border border-slate-200 rounded-lg">
                  <div className="text-sm text-slate-600">Medium (1000)</div>
                  <div className="text-xl font-bold text-slate-800">$42.15</div>
                </div>
                <div className="p-4 border border-slate-200 rounded-lg">
                  <div className="text-sm text-slate-600">Production (10k+)</div>
                  <div className="text-xl font-bold text-slate-800">$28.90</div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

// Helper Components
function MetricCard({ title, value, icon: Icon, trend, color }) {
  const colors = {
    blue: 'bg-blue-500',
    green: 'bg-green-500',
    red: 'bg-red-500',
    purple: 'bg-purple-500',
  };

  return (
    <div className="bg-white rounded-lg border border-slate-200 p-5">
      <div className="flex items-center justify-between mb-3">
        <div className={`p-2 rounded-lg ${colors[color]}`}>
          <Icon size={20} className="text-white" />
        </div>
      </div>
      <div className="text-2xl font-bold text-slate-800">{value}</div>
      <div className="text-sm text-slate-600 mt-1">{title}</div>
      <div className="text-xs text-slate-500 mt-2">{trend}</div>
    </div>
  );
}

function WarningItem({ severity, text, module }) {
  const colors = {
    high: 'bg-red-100 text-red-700',
    medium: 'bg-amber-100 text-amber-700',
    low: 'bg-blue-100 text-blue-700',
  };

  return (
    <div className="flex items-start gap-3 p-3 bg-slate-50 rounded-lg">
      <AlertCircle size={18} className={severity === 'high' ? 'text-red-500' : severity === 'medium' ? 'text-amber-500' : 'text-blue-500'} />
      <div className="flex-1">
        <div className="text-sm text-slate-800">{text}</div>
        <div className="text-xs text-slate-500 mt-1">{module}</div>
      </div>
    </div>
  );
}

function ActivityItem({ user, action, entity, time }) {
  return (
    <div className="flex items-start gap-3">
      <div className="w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white text-xs font-semibold">
        {user.split(' ').map(n => n[0]).join('')}
      </div>
      <div className="flex-1">
        <div className="text-sm text-slate-800">
          <span className="font-medium">{user}</span> {action} <span className="font-medium text-blue-600">{entity}</span>
        </div>
        <div className="text-xs text-slate-500">{time}</div>
      </div>
    </div>
  );
}

function CoverageBar({ label, value, color }) {
  const colors = {
    green: 'bg-green-500',
    yellow: 'bg-amber-500',
    red: 'bg-red-500',
  };

  return (
    <div>
      <div className="flex justify-between text-xs text-slate-600 mb-1">
        <span>{label}</span>
        <span>{value}%</span>
      </div>
      <div className="h-2 bg-slate-100 rounded-full overflow-hidden">
        <div className={`h-full ${colors[color]}`} style={{ width: `${value}%` }}></div>
      </div>
    </div>
  );
}

function FavoriteItem({ icon: Icon, name, id }) {
  return (
    <div className="flex items-center gap-2 p-2 hover:bg-slate-50 rounded cursor-pointer">
      <Icon size={16} className="text-slate-400" />
      <div className="flex-1">
        <div className="text-sm text-slate-800">{name}</div>
        <div className="text-xs text-slate-500">{id}</div>
      </div>
      <Star size={14} className="text-amber-500 fill-amber-500" />
    </div>
  );
}

function StatusBadge({ status }) {
  const styles = {
    'In Progress': 'bg-blue-100 text-blue-700',
    'Pending': 'bg-amber-100 text-amber-700',
    'Draft': 'bg-slate-100 text-slate-700',
    'Approved': 'bg-green-100 text-green-700',
    'Complete': 'bg-green-100 text-green-700',
    'Mitigated': 'bg-green-100 text-green-700',
    'Open': 'bg-red-100 text-red-700',
    'User': 'bg-purple-100 text-purple-700',
    'System': 'bg-blue-100 text-blue-700',
    'Design': 'bg-green-100 text-green-700',
  };

  return (
    <span className={`px-2 py-1 rounded-full text-xs font-medium ${styles[status] || 'bg-slate-100 text-slate-700'}`}>
      {status}
    </span>
  );
}

function RiskScoreBadge({ score }) {
  const getColor = () => {
    if (score <= 4) return 'bg-green-500';
    if (score <= 9) return 'bg-amber-500';
    if (score <= 15) return 'bg-orange-500';
    return 'bg-red-500';
  };

  return (
    <span className={`inline-flex items-center justify-center w-10 h-10 rounded-full ${getColor()} text-white text-sm font-bold`}>
      {score}
    </span>
  );
}

function ProgressBar({ value }) {
  return (
    <div className="flex items-center gap-2">
      <div className="flex-1 h-2 bg-slate-100 rounded-full overflow-hidden">
        <div className="h-full bg-blue-500" style={{ width: `${value}%` }}></div>
      </div>
      <span className="text-xs text-slate-600 w-8">{value}%</span>
    </div>
  );
}

function GanttBar({ name, start, duration, color }) {
  const colors = {
    blue: 'bg-blue-500',
    green: 'bg-green-500',
    amber: 'bg-amber-500',
    purple: 'bg-purple-500',
  };

  return (
    <div className="flex items-center gap-2">
      <div className="w-32 text-xs text-slate-600">{name}</div>
      <div className="flex-1 h-8 bg-slate-100 rounded relative">
        <div 
          className={`absolute h-full ${colors[color]} rounded flex items-center px-2 text-xs text-white font-medium`}
          style={{ left: `${start}%`, width: `${duration}%` }}
        >
          {duration}d
        </div>
      </div>
    </div>
  );
}

function StatusBar({ label, value, color }) {
  const colors = {
    green: 'bg-green-500',
    blue: 'bg-blue-500',
    amber: 'bg-amber-500',
    red: 'bg-red-500',
  };

  return (
    <div>
      <div className="flex justify-between text-xs text-slate-600 mb-1">
        <span>{label}</span>
        <span>{value}%</span>
      </div>
      <div className="h-3 bg-slate-100 rounded-full overflow-hidden">
        <div className={`h-full ${colors[color]}`} style={{ width: `${value}%` }}></div>
      </div>
    </div>
  );
}

function ResourceBar({ name, value }) {
  const getColor = () => {
    if (value >= 90) return 'bg-red-500';
    if (value >= 75) return 'bg-amber-500';
    return 'bg-green-500';
  };

  return (
    <div>
      <div className="flex justify-between text-xs text-slate-600 mb-1">
        <span>{name}</span>
        <span>{value}%</span>
      </div>
      <div className="h-3 bg-slate-100 rounded-full overflow-hidden">
        <div className={`h-full ${getColor()}`} style={{ width: `${value}%` }}></div>
      </div>
    </div>
  );
}

export default App;
